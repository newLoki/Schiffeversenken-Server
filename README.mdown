#Installation

## Application
Checkout into _htdocs_ folder
` git clone git://github.com/newLoki/Schiffeversenken-Server.git /path/to/htdocs/schiffeversenken-server`
now you can access the site by typing *http://<servername>/schiffeversenken-server* into your webbroser.  
For <servername> you can use localhost, if you have run a development server on your local machine.


##Database
Insert your connection information into _application/configs/application.ini_.
After this, setup your Database by creating a new database (all <____> are Placeholders):
`mysql -u <UserName> -p <Password> | CREATE DATABASE ships;`.
Last step is to execute liquibase, our database versioning tool, first time.
To do this, you have to go to the _build_ folder and execute the following command (<___> are also placeholders):
`java -jar liquibase.jar --driver=com.mysql.jdbc.Driver \
     --classpath=databasedriver/mysql-connector-java-5.1.17-bin.jar \
     --changeLogFile=.../data/sql/changelog.xml \
     --url="jdbc:mysql://127.0.0.1:<MysqlPort>/ships" \
     --username=<UserName> \
     --password=<Password> \
     migrate`



#ToDo:
* Implement ACL
* Implement Model & Entities for:
+ scores (in progress - newLoki)
+ userscores (in progress - newLoki)
+ best userscores, using join to get the best (in progress)
+ move table view helper into library to enable access from each view
* Implement controller to show score list (as index) -> done, implemented in
index controller
* Implement controller to show user scores -> in progress (in profile action in
account controller)
* Implement view to show all scores for one user -> in progress (in profile view)
* Implement action & model to remove score from user scores
* Implement abstract service layer
* Implement SOAP interface over SSL
+ Plane interfaces for using this score server with "Schiffeversenken" client
+ Generate WSDL
+ Implement service methods (not specified yet)
* Profile images
+ Entity
+ add to profile view

#Done
* Implement view for scores as list -> done (in index view)